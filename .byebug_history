continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
continue
Vendor.find(order.vendor_id).longitude
Vendor.find(order.vendor_id).latitude
continue
order
continue
order
continue
address2
address1
continue
address2
address1
continue
address2
address1
continue
address2
address1
continue
address2
address1
continue
address1
continue
customer_i
vendor_i
continue
Customer.all
Customer.al
Vendor.all
address2
address1
continue
address2
address1
continue
address1
continue
average_time
continue
Vendor.all
continue
Vendor.all
continue
average_time
customer_i.address
vendor_i.address
continue
average_time
customer_i.address
vendor_i.address
continue
average_time
customer_i.address
vendor_i.address
continue
Vendor.all
continue
Vendor.all
continue
address2
address1
continue
address2
address1
vendor_i.address
continue
average_time
customer_i.address
vendor_i.address
continue
customer_i.address
vendor_i.address
continue
customer_i.address
vendor_i.address
address2
address1
Geocoder::Calculations.distance_between(address1, address2)
Geocoder::Calculations.distance_between([34.33,56.33], [43.43, 67.56])
Geocoder::Calculations.distance_between(address1, [43.43, 67.56])
Geocoder::Calculations.distance_between(address1, address2)
distance
Geocoder::Calculations.distance_between(address1, address2)
distance
continue
!distance.nan?
distance
calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))
continue
calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))
continue
calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))
continue
calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))
continue
calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))
continue
calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))
continue
calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))
from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))
(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))
from_address_to_geo_location(customer_i.address)
from_address_to_geo_location(vendor_i.address)
(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))/70
calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))/70
continue
calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))/70
continue
NaN
calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))/70
average_time
continue
average_time
a
a = calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))/70
calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))/70
average_time
calculate_distance(from_address_to_geo_location(vendor_i.address),from_address_to_geo_location(customer_i.address))
from_address_to_geo_location(vendor_i.address)
from_address_to_geo_location(customer_i.address)
customer_i.address
vendor_i.address
average_time
continue
average_time
Order.count
continue
address
continue
address
continue
address
continue
vendor_i
continue
vendor_i
continue
vendor_i
vendor_i.address
vendor_id.address
continue
vendor_i.address
average_time
continue
customer_i.address.slice!(",")
from_address_to_geo_location(customer_i.address)
customer_i.address
customer_i.address.slice!(",")
customer_i.address
customer_i.address.slice!(",")
c = customer_i.address.slice!(",")
c
c = customer_i.address.slice!(",")
customer_i.address.slice!(",")
customer_i.address
customer_i.address.slice!(",")
customer_i.address
from_address_to_geo_location(customer_i)
from_address_to_geo_location("NY")
customer_i.address
from_address_to_geo_location(customer_i.
continue
from_address_to_geo_location(customer_i)
calculate_distance(from_address_to_geo_location(vendor_i),from_address_to_geo_location(customer_i))
average_time
continue
elapsed_time==average_time
continue
elapsed_time==average_time
elapsed_time>average_time
continue
elapsed_time>average_time
elapsed_time
continue
geo.first
continue
geo.first
continue
geo.nil?
continue
geo.nil?
continue
geo.nil?
continue
geo.nil?
continue
geo.nil?
continue
geo.nil?
continue
geo.nil?
continue
geo.nil?
continue
geo.nil?
continue
geo.nil?
continue
geo.nil?
continue
geo.nil?
geo.nil
continue
geo
geo.nil?
